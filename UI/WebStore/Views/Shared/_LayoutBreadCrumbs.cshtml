@using WebStore.Domain.ViewModels.BreadCrumbs
@using WebStore.Controllers
@{
    Layout = "_LayoutBase";

    BreadCrumbType type;
    if (Context.Request.Query.ContainsKey("SectionId"))
    {
        type = BreadCrumbType.Section;
    }
    else
    {
        type = Context.Request.Query.ContainsKey("BrandId")
            ? BreadCrumbType.Brand
            : BreadCrumbType.None;
    }

    if ((string) ViewContext.RouteData.Values["action"] == nameof(CatalogController.Details))
    {
        type = BreadCrumbType.Product;
    }

    var id = 0;
    var fromType = BreadCrumbType.Section;

    switch (type)
    {
        default: throw new ArgumentOutOfRangeException();
                        
        case BreadCrumbType.None:
            break;
        case BreadCrumbType.Section:
            id = int.Parse(Context.Request.Query["SectionId"].ToString());
            break;
        case BreadCrumbType.Brand:
            id = int.Parse(Context.Request.Query["BrandId"].ToString());
            break;    
        case BreadCrumbType.Product:
            id = int.Parse(ViewContext.RouteData.Values["id"].ToString());
            if (Context.Request.Query.ContainsKey("FromBrand"))
            {
                fromType = BreadCrumbType.Brand;
            }
            break;
    }
}

<div class="container">
    @await Component.InvokeAsync("BreadCrumbs", new { Type = type, id, FromType = fromType})
    
    @RenderBody()
</div>